#!/usr/bin/env python

# rmspeers 2011 ryan@rmspeers.com

# This tool requires Scapy installed with Dot15d4 layer support.
#  Hint: install from the scapy-com repository.

import sys, os
import signal
import time

from killerbee import *
try:
    from scapy.all import Dot15d4, Dot15d4Beacon, Dot15d4Cmd
except ImportError:
    print "This tool requires Scapy to be installed, including dot15d4 support."
    sys.exit(-1)

txcount = 0
rxcount = 0
stumbled = {}

def usage():
    print >>sys.stderr, """
zbstumbler: Transmit beacon request frames to the broadcast address while
channel hopping to identify ZC/ZR devices. This version uses two interface 
devices (with one transmitting and another receiving) in order to achieve 
increased success against devices which send a very fast beacon response.

Usage: zbstumbler [-iscwD] [-i devstring1 [-i devstring2]] [-c channel]
                           [-s per-channel delay] [-w report.csv]
    """

def display_details(routerdata):
        stackprofile_map = {0:"Network Specific",
                            1:"ZigBee Standard",
                            2:"ZigBee Enterprise"}
        stackver_map = {0:"ZigBee Prototype",
                        1:"ZigBee 2004",
                        2:"ZigBee 2006/2007"}
        spanid, source, extpanid, stackprofilever, channel = routerdata
        stackprofile = ord(stackprofilever) & 0x0f
        stackver = (ord(stackprofilever) & 0xf0) >>4

        print "New Network: PANID 0x%02X%02X  Source 0x%02X%02X"%(ord(spanid[0]), ord(spanid[1]), ord(source[0]), ord(source[1]))

        try:
            extpanidstr=""
            for ind in range(0,7):
                extpanidstr += "%02x:"%ord(extpanid[ind])
            extpanidstr += "%02X"%ord(extpanid[-1])
            sys.stdout.write("\tExt PANID: " + extpanidstr)
        except IndexError:
            sys.stdout.write("\tExt PANID: Unknown")

        try:
            print "\tStack Profile: %s"%stackprofile_map[stackprofile]
            stackprofilestr = stackprofile_map[stackprofile]
        except KeyError:
            print "\tStack Profile: Unknown (%d)"%stackprofile
            stackprofilestr = "Unknown (%d)"%stackprofile

        try:
            print "\tStack Version: %s"%stackver_map[stackver]
            stackverstr = stackver_map[stackprofile]
        except KeyError:
            print "\tStack Version: Unknown (%d)"%stackver
            stackverstr = "Unknown (%d)"%stackver

        print "\tChannel: %d"%channel

        if report_csv != None:
            report_csv.write("0x%02X%02X,0x%02X%02X,%s,%s,%s,%d\n"%(ord(spanid[0]), ord(spanid[1]), ord(source[0]), ord(source[1]), extpanidstr, stackprofilestr, stackverstr, channel))


def response_handler(stumbled, packet_bytes, channel):
    global arg_verbose
    global report_csv
    scapyd = Dot15d4(packet_bytes)
    # Check if this is a beacon frame
    if isinstance(scapyd.payload, Dot15d4Beacon):
        if arg_verbose:
            print "Received frame is a beacon."

        # The 6th element offset in the Dot154PacketParser.pktchop() method
        # contains the beacon data in its own list.  Extract the Ext PAN ID.
        beacondata = scapyd.payload.payload
        extpanid = beacondata.load[6][::-1]   #TODO implement using scapy fields
        stackprofilever = beacondata.load[4]

        spanid = hex(scapyd.getfieldval('src_panid'))[2:]
        source = hex(scapyd.getfieldval('src_addr'))[2:]
        key = ''.join([spanid, source])
        value = [spanid, source, extpanid, stackprofilever, channel]
        if not key in stumbled:
            if arg_verbose:
                print "Beacon represents new network."
            stumbled[key] = value
            display_details(value)
        return value
    # If the frame was not a beacon
    if arg_verbose:
        print "Received frame is not a beacon (%s)." % scapyd.payload.summary()
    return None

def show_dev():
    print "Dev\tProduct String\tSerial Number"
    for dev in kbutils.devlist():
        print "%s\t%s\t%s" % (dev[0], dev[1], dev[2])

def interrupt(signum, frame):
    global txcount
    global rxcount
    global kb1
    global kb2
    global report_csv
    if report_csv != None:
        report_csv.close()
    kb1.close()
    kb2.close()
    print "\n%d packets transmitted, %d responses." % (txcount, rxcount)
    sys.exit(0)

if __name__ == '__main__':

    # Command-line arguments
    arg_devstring = []
    arg_delay = 5
    arg_verbose = False
    arg_channel = None
    report_csv = None

    # Beacon frame
    beacon = "\x03\x08\x00\xff\xff\xff\xff\x07"
    # Immutable strings - split beacon around sequence number field
    beaconp1 = beacon[0:2]
    beaconp2 = beacon[3:]

    while len(sys.argv) > 1:
        op = sys.argv.pop(1)
        if op == '-i':
            arg_devstring.append(sys.argv.pop(1))
        if op == '-s':
            arg_delay = float(sys.argv.pop(1))
        if op == '-h':
            usage()
            sys.exit(0)
        if op == '-v':
            arg_verbose = True
        if op == '-c':
            arg_channel = int(sys.argv.pop(1))
        if op == '-w':
            report_csv = open(sys.argv.pop(1), "w")
            report_csv.write("panid,source,extpanid,stackprofile,stackversion,channel\n")
        if op == '-D':
            show_dev()
            sys.exit(0)
    
    kb1 = KillerBee(device=arg_devstring[0] if len(arg_devstring)>=1 else None)
    kb2 = KillerBee(device=arg_devstring[1] if len(arg_devstring)>=2 else None)
    signal.signal(signal.SIGINT, interrupt)

    print "zbstumbler: Transmitting on interface \'%s\'" % kb1.get_dev_info()[0]
    print "            Receiving on interface \'%s\'" % kb2.get_dev_info()[0]
    
    seqnum = 0                         # Sequence number of beacon request frame
    channel = arg_channel if arg_channel else 11       # Starting channel number

    # Loop injecting and receiving packets
    while 1:
        if channel > 26: channel = 11
        if seqnum > 255: seqnum = 0
    
        if not arg_channel or seqnum == 0:
            if arg_verbose:
                print "Setting channel to %d." % channel
            #TODO separate error handling by device instance
            try:
                kb1.set_channel(channel)
                kb2.set_channel(channel)
            except Exception, e:
                print "ERROR: Failed to set channel to %d." % channel
                print e
                sys.exit(-1)
    
        #TODO change to use scapy construction (outside loop) and modification
        beaconinj = ''.join([beaconp1, "%c"%seqnum, beaconp2])

        if arg_verbose: print "Transmitting beacon request (on %d)." % kb1.channel
        # Process packets for arg_delay seconds looking for the beacon response frame.
        start = time.time()

        try:
            txcount+=1
            kb1.inject(beaconinj)
        except Exception, e:
            print "ERROR: Unable to inject packet"
            print e
            sys.exit(-1)

        pkts = []
        while (start+arg_delay > time.time()):
            pkts.append(kb2.pnext()) #non-blocking
        if arg_verbose: print "Received %d samples (on %d)." % (len(pkts), kb2.channel)

        for recvpkt in pkts:
            # Check for empty packet (timeout) and valid FCS
            if recvpkt != None:# and recvpkt[1]:
                rxcount+=1
                if arg_verbose:
                    print "Received frame."#, time.time()-start
                networkdata = response_handler(stumbled, recvpkt['bytes'], channel) 

        #kb2.sniffer_off()
        seqnum += 1
        if not arg_channel:
            channel += 1

